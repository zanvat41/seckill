<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- Configuration steps for integrating MyBatis -->
    <!-- 1. Configure database-related properties: ${url} -->
    <context:property-placeholder location="classpath:jdbc.properties" />

    <!-- 2. Database connection pool -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- Configure connection pool properties -->
        <property name="driverClass" value="${jdbc.driver}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <!-- Private properties of the C3P0 connection pool -->
        <property name="maxPoolSize" value="30" />
        <property name="minPoolSize" value="10" />
        <!-- Do not auto-commit after closing the connection -->
        <property name="autoCommitOnClose" value="false" />
        <!-- Connection timeout setting -->
        <property name="checkoutTimeout" value="10000" />
        <!-- Number of retries when connection acquisition fails -->
        <property name="acquireRetryAttempts" value="2" />
    </bean>

    <!-- 3. Configure SqlSessionFactory object -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- Inject database connection pool -->
        <property name="dataSource" ref="dataSource" />
        <!-- Configure MyBatis global config file: mybatis-config.xml -->
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <!-- Scan entity package to use aliases -->
        <property name="typeAliasesPackage" value="org.seckill.entity" />
        <!-- Scan SQL mapper XML files -->
        <property name="mapperLocations" value="classpath:mapper/*.xml" />
    </bean>

    <!-- 4. Configure scanning of Dao interfaces to dynamically implement them -->
    <!-- and inject them into the Spring container -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- Inject sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <!-- Specify the package to scan for Dao interfaces -->
        <property name="basePackage" value="org.seckill.dao" />
    </bean>

    <!-- RedisDao -->
    <bean id="redisDao" class="org.seckill.dao.cache.RedisDao">
        <constructor-arg index="0" value="localhost" />
        <constructor-arg index="1" value="6379" />
    </bean>
</beans>